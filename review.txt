## Variables and options must be escaped when echo'd

Much related to sanitizing everything, all variables that are echoed need to be escaped when they're echoed, so it can't hijack users or (worse) admin screens. There are many esc_*() functions you can use to make sure you don't show people the wrong data, as well as some that will allow you to echo HTML safely.

At this time, we ask you escape all $-variables, options, and any sort of generated data when it is being echoed. That means you should not be escaping when you build a variable, but when you output it at the end. We call this 'escaping late.'

Note: The functions _e and _ex outputs the translation without escaping, please use an alternative function that escapes the output.

    An alternative to _e would be esc_html_e, esc_attr_e or simply using __ wrapped by a escaping function and inside an echo.
    An alternative to _ex would be using _x wrapped by a escaping function and inside an echo.

Examples:

<h2><?php esc_html_e('Settings page', 'plugin-slug'); ?></h2>
 <h2><?php echo esc_html(__('Settings page', 'plugin-slug')); ?></h2>
 <h2><?php echo esc_html(_x('Settings page', 'Settings page title', 'plugin-slug')); ?></h2>


Example(s) from your plugin:


customtables/inc/admin/views/customtables-records-edit.php:21 _e('Add New Record');
customtables/inc/admin/views/customtables-records.php:15 _e('Custom Tables - Table', $this->plugin_text_domain);
customtables/inc/admin/views/customtables-records-edit.php:75 _e('Edit record.');
customtables/inc/libraries/class-wp-list-table.php:342 _e( 'No items found.' );


... out of a total of 32 coincidences.

## Generic function/class/define/namespace/option names

All plugins must have unique function names, namespaces, defines, class and option names. This prevents your plugin from conflicting with other plugins or themes. We need you to update your plugin to use more unique and distinct names.

A good way to do this is with a prefix. For example, if your plugin is called "Easy Custom Post Types" then you could use names like these:

    function ecpt_save_post()
    define( 'ECPT_LICENSE', true );
    class ECPT_Admin{}
    namespace ECPT;
    update_option( 'ecpt_settings', $settings );


Don't try to use two (2) or three (3) letter prefixes anymore. We host nearly 100-thousand plugins on WordPress.org alone. There are tens of thousands more outside our servers. Believe us, youâ€™re going to run into conflicts.

You also need to avoid the use of __ (double underscores), wp_ , or _ (single underscore) as a prefix. Those are reserved for WordPress itself. You can use them inside your classes, but not as stand-alone function.

Please remember, if you're using _n() or __() for translation, that's fine. We're only talking about functions you've created for your plugin, not the core functions from WordPress. In fact, those core features are why you need to not use those prefixes in your own plugin! You don't want to break WordPress for your users.

Related to this, using if (!function_exists('NAME')) { around all your functions and classes sounds like a great idea until you realize the fatal flaw. If something else has a function with the same name and their code loads first, your plugin will break. Using if-exists should be reserved for shared libraries only.

Remember: Good prefix names are unique and distinct to your plugin. This will help you and the next person in debugging, as well as prevent conflicts.

Analysis result:


# Looks like there are elements not using common prefixes.
customtables/libraries/customtables/loader.php:11 function str_contains
customtables/libraries/customtables/loader.php:17 function CTLoader

