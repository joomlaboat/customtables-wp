WordPress Plugin Review Team - 1/9/2024 - Completed

WordPress Plugin Review Team - 1/16/2024:

## Unsafe SQL calls

When making database calls, it's highly important to protect your code from SQL injection vulnerabilities. You need to update your code to use wpdb calls and prepare() with your queries to protect them.

Please review the following:

    https://developer.wordpress.org/reference/classes/wpdb/#protect-queries-against-sql-injection-attacks
    https://codex.wordpress.org/Data_Validation#Database
    https://make.wordpress.org/core/2012/12/12/php-warning-missing-argument-2-for-wpdb-prepare/
    https://ottopress.com/2013/better-know-a-vulnerability-sql-injection/

Example(s) from your plugin:

customtables/libraries/ct-database-wp.php:429 $query = "SELECT " . implode(',', $selects) . " FROM " . $realTableName

. ($whereString != '' ? ' WHERE ' . $whereString : '')
. (!empty($groupBy) != '' ? ' GROUP BY ' . $groupBy : '')
. (!empty($order) ? ' ORDER BY ' . $order . ($orderBy !== null and strtolower($orderBy) == 'desc' ? ' DESC' : '') : '')
. (!empty($limit) ? ' LIMIT %d' : '')//Use of single explicit placeholder is needed for WPCS verification because it thinks that $placeholders is a single variable, but it's an array
. (!empty($limitStart) ? ' OFFSET ' . $limitStart : '');
customtables/libraries/ct-database-wp.php:437 $query = $wpdb->prepare($query, ...$placeholders);
customtables/libraries/ct-database-wp.php:444 $results = $wpdb->get_results($query, $output_type_temp);// phpcs:ignore WordPress.DB.PreparedSQL -- Ignore Prepared SQL warnings

-----> $wpdb->get_results($query, $output_type_temp)
                                              # There is a call to a wpdb::prepare() function, but it's not in the same execution context as the query call.
                                              # You cannot add calls like "implode(',', $selects)" directly to the SQL query.
                                              # Using wpdb::prepare($query, $args) you will need to include placeholders for each variable within the query and include the variables in the second parameter.
                                              # You cannot add calls like "implode(',', $selects)" directly to the SQL query. You need to use wpdb::prepare.
                                              # Remember that using wpdb::prepare($query, $args) you will need to include placeholders for each variable within the query and include the variables in the second parameter.
                                              # The SQL query needs to be included in a wpdb::prepare($query, $args) function.


... out of a total of 4 coincidences.

Note: Passing individual values to wpdb::prepare using placeholders is fairly straightforward, but what if we need to pass an array of values instead?

You'll need to create a placeholder for each item of the array and pass all the corresponding values to those placeholders, this seems tricky, but here is a snippet to do so.


$wordcamp_id_placeholders = implode( ', ', array_fill( 0, count( $wordcamp_ids ), '%d' ) );
$prepare_values = array_merge( array( $new_status ), $wordcamp_ids );

$wpdb->query( $wpdb->prepare( "             UPDATE `$table_name`             SET `post_status` = %s             WHERE ID IN ( $wordcamp_id_placeholders )",             $prepare_values         ) );

There is a core ticket that could make this easier in the future: https://core.trac.wordpress.org/ticket/54042

Example(s) from your plugin:


customtables/libraries/ct-database-wp.php:429 $query = "SELECT " . implode(',', $selects) . " FROM " . $realTableName
