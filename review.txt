WordPress Plugin Review Team - 1/9/2024 - Completed

WordPress Plugin Review Team - 1/16/2024 - Completed (Partly)

WordPress Plugin Review Team - 2/17/2024 - Completed (Partly)

Continues with this:
What if we want to include a dynamic value inside the translation? Easy, you need to add a placeholder which will be part of the string and change it after the gettext function does its magic, you can use printf to do so, like this:

printf(
       /* translators: %s: First name of the user */
       esc_html__( 'Hello %s, how are you?', 'plugin-slug' ),
       esc_html( $user_firstname )
 );
You can read https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/#text-domains for more information.
-----------------------


## Internationalization: Don't use variables or defines as text, context or text domain parameters.

In order to make a string translatable in your plugin you are using a set of special functions. These functions collectively are known as "gettext".

There is a dedicated team in the WordPress community to translate and help other translating strings of WordPress core, plugins and themes to other languages.

To make them be able to translate this plugin, please do not use variables or function calls for the text, context or text domain parameters of any gettext function, all of them NEED to be strings. Note that the translation parser reads the code without executing it, so it won't be able to read anything that is not a string within these functions.

For example, if your gettext function looks like this...
esc_html__( $greetings , 'plugin-slug' );
...the translator won't be able to see anything to be translated as $greetings is not a string, it is not something that can be translated.
You need to give them the literal string to be translated, so they can see it in the translation system and can translate it, the correct would be as follows...
esc_html__( 'Hello, how are you?' , 'plugin-slug' );

This also applies to the translation domain, this is a bad call:
esc_html__( 'Hello, how are you?' , $plugin_slug );
The fix here would be like this
esc_html__( 'Hello, how are you?' , 'plugin-slug' );
Also note that the translation domain needs to be the same as your plugin slug.

What if we want to include a dynamic value inside the translation? Easy, you need to add a placeholder which will be part of the string and change it after the gettext function does its magic, you can use printf to do so, like this:

printf(
       /* translators: %s: First name of the user */
       esc_html__( 'Hello %s, how are you?', 'plugin-slug' ),
       esc_html( $user_firstname )
 );


You can read https://developer.wordpress.org/plugins/internationalization/how-to-internationalize-your-plugin/#text-domains for more information.

Example(s) from your plugin:


customtables/libraries/customtables/layouts/html_tags.php:287 __("COM_CUSTOMTABLES_' . strtoupper({$mode}) . '_SELECTED", "customtables");


## Data Must be Sanitized, Escaped, and Validated

When you include POST/GET/REQUEST/FILE calls in your plugin, it's important to sanitize, validate, and escape them. The goal here is to prevent a user from accidentally sending trash data through the system, as well as protecting them from potential security issues.

SANITIZE: Data that is input (either by a user or automatically) must be sanitized as soon as possible. This lessens the possibility of XSS vulnerabilities and MITM attacks where posted data is subverted.

VALIDATE: All data should be validated, no matter what. Even when you sanitize, remember that you don’t want someone putting in ‘dog’ when the only valid values are numbers.

ESCAPE: Data that is output must be escaped properly when it is echo'd, so it can't hijack admin screens. There are many esc_*() functions you can use to make sure you don't show people the wrong data.

To help you with this, WordPress comes with a number of sanitization and escaping functions. You can read about those here:

    https://developer.wordpress.org/apis/security/sanitizing/
    https://developer.wordpress.org/apis/security/escaping/


Remember: You must use the most appropriate functions for the context. If you’re sanitizing email, use sanitize_email(), if you’re outputting HTML, use wp_kses_post(), and so on.

An easy mantra here is this:

Sanitize early
Escape Late
Always Validate

Clean everything, check everything, escape everything, and never trust the users to always have input sane data. After all, users come from all walks of life.

Example(s) from your plugin:


customtables/libraries/ct-common-wp.php:433 $value = $_GET[$parameter] ?? null;
customtables/inc/admin/class-admin-layout-list.php:493 $layouts = ($_POST['layout'] ?? []);
customtables/libraries/ct-common-wp.php:417 return $_SESSION[$returnto_key] ?? '';


